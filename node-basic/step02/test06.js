/* 주제: 연산자 - 논리 연산자 II
- 가끔 간단한 명령문에 대해 조건문을 대신해 사용하기도 한다.
*/
"use strict"; // 세미콜론이 없으면 다음 명령문에 따라 현재 명령문을 자동으로 종료할 지 결정한다.
              // 이 예제의 경우 다음 명령문이 "use strict"와 연결된 것처럼 해석되기 때문에
              // 세미콜론으로 명확하게 명령어의 끝임을 지정해야 한다.

// 논리 연산자를 활용하여 짝수/홀수 구분하기
// &&의 첫 번째 식의 결과가 true이면 두 번째 식을 실행한다.
// 이유? && 연산은 첫 번째 값이 true이면 두 번째 값을 확인해봐야 결과를 알 수 있다.
//       그래서 첫 번째 식의 값이 true 인 경우 두 번째 식을 실행하는 것이다.
((10 % 2) == 0) && console.log("실행1");

// 첫 번째 식의 결과가 false이기 때문에 이미 결론을 알 수 있다.
// 그래서 두 번째 식을 실행하지 않는 것이다.
((11 % 2) == 0) && console.log("실행2");

// 첫 번째 식의 결과가 true이다. 이미 결론을 알 수 있다.
// 그래서 두 번째 식을 실행하지 않는다.
((10 % 2) == 0) || console.log("실행3");

// 첫 번째 식의 결과가 false이다. 아직 결론을 알 수 없다.
// 그래서 두 번째 식을 실행하는 것이다.
((11 % 2) == 0) || console.log("실행4");

var a = 11;
((a % 2) == 0) && console.log("짝수 입니다.");
((a % 2) == 0) || console.log("홀수 입니다.");





//
