/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package bitcamp.lms;

import java.sql.Date;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class App {
  public static void main(String[] args) {

    final int LENTH = 100;
    Lesson[] lessons = new Lesson[LENTH];
    Member[] Members = new Member[LENTH];
    List<Board> boards = new ArrayList<Board>();
    Scanner keyboard = new Scanner(System.in);

    int lessonsSize = 0;
    int membersSize = 0;

    while (true) {

      System.out.print("명령> ");
      String cmd = keyboard.nextLine();

      if (cmd.equalsIgnoreCase("quit")) {

        System.out.println("안녕!");
        keyboard.close();
        break;

      } else if (cmd.equals("/lesson/add")) {

        Lesson lesson = new Lesson();
        System.out.print("번호? ");
        lesson.num = Integer.parseInt(keyboard.nextLine());
        System.out.print("수업명? ");
        lesson.className = keyboard.nextLine();
        System.out.print("수업내용? ");
        lesson.classContents = keyboard.nextLine();
        System.out.print("시작일? ");
        lesson.startDate = Date.valueOf(keyboard.nextLine());
        System.out.print("종료일? ");
        lesson.endDate = Date.valueOf(keyboard.nextLine());
        System.out.print("총수업시간? ");
        lesson.totalClassTime = Integer.parseInt(keyboard.nextLine());
        System.out.print("일수업시간? ");
        lesson.oneClassHour = Integer.parseInt(keyboard.nextLine());
        lessons[lessonsSize] = lesson;
        lessonsSize++;
        System.out.println("저장하였습니다.");

      } else if (cmd.equals("/lesson/list")) {

        for (int i = 0; i < lessonsSize; i++) {
          System.out.printf("%-15s, %s ~ %s, %s\n", 
              lessons[i].className, lessons[i].startDate, lessons[i].endDate, lessons[i].oneClassHour);

        }
      } else if (cmd.equals("/member/add")) {

        System.out.print("번호? ");
        int no = Integer.parseInt(keyboard.nextLine());
        System.out.print("이름? ");
        String name = keyboard.nextLine();
        System.out.print("이메일? ");
        String email = keyboard.nextLine();
        System.out.print("암호? ");
        String password = keyboard.nextLine();
        System.out.print("사진? ");
        String photo = keyboard.nextLine();
        System.out.print("전화? ");
        String tel = keyboard.nextLine();

        Member member = new Member(no, name, email, password, photo, tel);
        member.createdDate = new Date(System.currentTimeMillis());

        Members[membersSize] = member;
        membersSize++;
        System.out.println("저장하였습니다.");

      } else if (cmd.equals("/member/list")) {

        for (int i = 0; i < membersSize; i++) {
          Members[i].print();
        }

      } else if (cmd.equals("/board/add")) {

        System.out.print("번호? ");
        int no = Integer.parseInt(keyboard.nextLine());
        System.out.print("내용? ");
        String content = keyboard.nextLine();

        Board board = new Board(no, content);

        boards.add(board);
        System.out.println("저장하였습니다.");

      } else if (cmd.equals("/board/list")) {

        for (int i = 0; i < boards.size(); i++) {
          boards.get(i).print();
        }

      } else {
        System.out.println("실행할 수 없는 명령어입니다.");
      }
      System.out.println();
    }
  }
}